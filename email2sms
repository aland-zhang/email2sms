#!/usr/bin/env python3
"""
email2sms - email to sms gateway

This program is an smtp server that can send sms's. In order to send an
SMS, the recipient address must be +1234567890@sms.sms, where the
local part is a telephone number. For other recipient addresses, a
smarthost is used to forward the email as is.  The text of any email
towards number@sms.sms is sent with SMS to the number (the first 159
characters only). The email must be encoded in plain text; no base64
or other weirdness, or the SMS will be unreadable.

Uses configuration file /etc/email2sms.cfg, like this:

    [main]
    syslog_facility = local0
    listen_host = localhost
    listen_port = 2025
    smarthost_host = localhost
    smarthost_port = 25
    log_level = debug

    [diamondcard]
    acc = your_diamondcard_id
    pin = your_diamondcard_pin

Copyright (C) 2012-2016 Antonis Christofides

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
"""

import asyncore
from configparser import ConfigParser
import email
import logging
from logging.handlers import SysLogHandler
import os
from signal import signal, SIGTERM, SIGINT
import smtpd
from smtplib import SMTP
from socket import gethostname, getfqdn
import sys
from urllib.request import urlopen


def terminate(signum, frame):
    logging.info('Received signal %d; exiting' % (signum,))
    sys.exit()


class SMSError(Exception):

    def __init__(self, response):
        self.response = response

    def __str__(self):
        return ('Failed to send SMS: Response was %d instead of 200; '
                'full response was:\n%s\n') % (
                    self.response.code, ''.join(self.response.info().headers +
                                                '\r\n' +
                                                str(self.response.read())))


class CustomSMTPServer(smtpd.SMTPServer):

    def send_sms(self, numbers, message):
        response = urlopen(
            ('https://www.diamondcard.us/exec/voip-login?act=sms'
             '&accId=%s&pinCode=%s&from=%s&to=%s&msg=%s') % (
                 config.get('diamondcard', 'acc'),
                 config.get('diamondcard', 'pin'),
                 gethostname(), ','.join(numbers), message[:159]))
        if response.code != 200:
            raise SMSError(response)
        logging.debug('SMS server response was: ' + str(response.read()))

    def process_message(self, peer, mailfrom, rcpttos, data):
        logging.info('Received email from ' + mailfrom)
        e = email.message_from_string(data)
        logging.info('Email payload: ' + e.get_payload())

        # SMS
        numbers = [x.split('@')[0] for x in rcpttos if x.endswith('@sms.sms')]
        if numbers:
            logging.info('Sending SMS to ' + ', '.join(numbers))
            try:
                self.send_sms(numbers, '%s (%s)' % (e.get_payload(),
                                                    e['date']))
            except Exception as e:
                logging.error(str(e))

        # Emails
        emailrecipients = [x for x in rcpttos if not x.endswith('@sms.sms')]
        if emailrecipients:
            logging.info('Emailing ' + ', '.join(emailrecipients))
            try:
                smtp_server = SMTP(config.get('main', 'smarthost_host'),
                                   int(config.get('main', 'smarthost_port')))
                smtp_server.sendmail('root@' + getfqdn(), emailrecipients,
                                     e.as_string())
            except Exception as e:
                logging.error(str(e))


# Configuration
config = ConfigParser({'syslog_facility': 'local0', 'log_level': 'info',
                       'listen_host': '127.0.0.1', 'listen_port': 2025,
                       'smarthost_host': 'localhost', 'smarthost_port': 25})
config.read('/etc/email2sms.cfg')

# Logging
LEVELS = {'debug': logging.DEBUG,
          'info': logging.INFO,
          'warning': logging.WARNING,
          'error': logging.ERROR,
          'critical': logging.CRITICAL}
logging.getLogger('').setLevel(LEVELS[config.get('main', 'log_level').lower()])
handler = SysLogHandler('/dev/log', config.get('main', 'syslog_facility'))
handler.setFormatter(logging.Formatter('email2sms[' + str(os.getpid())
                                       + ']: %(levelname)s: %(message)s'))
logging.getLogger('').addHandler(handler)

logging.info('Starting email2sms')
listen_host = config.get('main', 'listen_host')
listen_port = int(config.get('main', 'listen_port'))
server = CustomSMTPServer((listen_host, listen_port), None)
logging.info('Listening on %s, port %d' % (listen_host, listen_port))
signal(SIGTERM, terminate)
signal(SIGINT, terminate)
asyncore.loop()
